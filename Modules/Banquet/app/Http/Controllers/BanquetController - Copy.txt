<?php

namespace Modules\Banquet\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\DB;
use Modules\Staff\Models\Employee;
use Modules\Banquet\Models\BanquetOrder;
use Modules\Banquet\Models\BanquetOrderDay;
use Modules\Banquet\Models\BanquetOrderMenuItem;

class BanquetController extends Controller
{
    /**
     * Display a listing of the banquets.
     */
    public function index()
    {
        $orders = BanquetOrder::with('days.menuItems')->paginate(15);
        return view('banquet::index', compact('orders'));
    }

    /**
     * Show the form for creating a new banquet order.
     */
    public function create()
    {
        return view('banquet::create');
    }


    /**
     * Store a newly created banquet order in storage.
     */
    public function store(Request $request)
    {
        // Validate main order data and nested days with menu items
        $data = $request->validate([
            'order_id'                  => 'required|unique:banquet_orders,order_id',
            'prep_date'                 => 'nullable|date',
            // Customer Information
            'organization'              => 'required|string|max:255',
            'contact_person_name'       => 'required|string|max:255',
            'department'                => 'nullable|string|max:255',
            'contact_person_phone'      => 'required|string|max:255',
            'contact_person_email'      => 'required|email|max:255',
            'referred_by'               => 'nullable|string|max:255',
            'contact_person_name_II'    => 'nullable|string|max:255',
            'contact_person_phone_II'   => 'nullable|string|max:255',
            'contact_person_email_II'   => 'nullable|email|max:255',
            // Event Information
            'event_description'         => 'nullable|string',
            'guest_count'               => 'required|integer|min:0',
            'event_status'              => 'required|in:Pending,Confirmed,Cancelled',
            // Payment Details
            'payment_method'            => 'nullable|in:Bank Transfer,Credit Card,Cash,Others',
            'total_amount'              => 'nullable|numeric',
            'deposit_amount'            => 'nullable|numeric',
            'balance_due'               => 'nullable|numeric',
            'payment_status'            => 'nullable|in:Pending,Partially Paid,Fully Paid',
            'payment_due_date'          => 'nullable|date',
            // Nested Event Days
            'days'                      => 'required|array',
            'days.*.event_date'         => 'required|date',
            'days.*.room'               => 'required|string|max:255',
            'days.*.setup_style'        => 'required|string|max:255',
            'days.*.start_time'         => 'nullable|date_format:H:i',
            'days.*.end_time'           => 'nullable|date_format:H:i',
            'days.*.special_requests'   => 'nullable|string',
            // Nested Menu Items for each day
            'days.*.menu_items'                     => 'required|array',
            'days.*.menu_items.*.item'              => 'required|string|max:255',
            'days.*.menu_items.*.quantity'          => 'required|integer|min:0',
            'days.*.menu_items.*.unit_price'        => 'required|numeric',
            'days.*.menu_items.*.total_price'       => 'required|numeric',
        ]);

        DB::beginTransaction();

        try {
            // Create the main banquet order record
            $order = BanquetOrder::create($data);

            // Loop through each day and its menu items
            foreach ($data['days'] as $dayData) {
                $dayData['banquet_order_id'] = $order->id;
                $orderDay = BanquetOrderDay::create($dayData);

                foreach ($dayData['menu_items'] as $menuData) {
                    $menuData['banquet_order_day_id'] = $orderDay->id;
                    BanquetOrderMenuItem::create($menuData);
                }
            }

            DB::commit();
            return redirect()->route('banquet.orders.index')->with('success', 'Banquet order created successfully.');
        } catch (\Exception $e) {
            DB::rollBack();
            return back()->withErrors(['error' => $e->getMessage()])->withInput();
        }
    }

    /**
     * Display the specified banquet order.
     */
    public function show($id)
    {
        $order = BanquetOrder::with('days.menuItems')->findOrFail($id);
        return view('banquet::orders.show', compact('order'));
    }

    /**
     * Show the form for editing the specified banquet order.
     */
    public function edit($id)
    {
        $order = BanquetOrder::with('days.menuItems')->findOrFail($id);
        return view('banquet::orders.edit', compact('order'));
    }

    /**
     * Update the specified banquet order in storage.
     */
    public function update(Request $request, $id)
    {
        $order = BanquetOrder::with('days.menuItems')->findOrFail($id);

        // Validate data; note that for updates the unique rule should ignore the current record.
        $data = $request->validate([
            'order_id'                  => 'required|unique:banquet_orders,order_id,' . $order->id,
            'prep_date'                 => 'nullable|date',
            // Customer Information
            'organization'              => 'required|string|max:255',
            'contact_person_name'       => 'required|string|max:255',
            'department'                => 'nullable|string|max:255',
            'contact_person_phone'      => 'required|string|max:255',
            'contact_person_email'      => 'required|email|max:255',
            'referred_by'               => 'nullable|string|max:255',
            'contact_person_name_II'    => 'nullable|string|max:255',
            'contact_person_phone_II'   => 'nullable|string|max:255',
            'contact_person_email_II'   => 'nullable|email|max:255',
            // Event Information
            'event_description'         => 'nullable|string',
            'guest_count'               => 'required|integer|min:0',
            'event_status'              => 'required|in:Pending,Confirmed,Cancelled',
            // Payment Details
            'payment_method'            => 'nullable|in:Bank Transfer,Credit Card,Cash,Others',
            'total_amount'              => 'nullable|numeric',
            'deposit_amount'            => 'nullable|numeric',
            'balance_due'               => 'nullable|numeric',
            'payment_status'            => 'nullable|in:Pending,Partially Paid,Fully Paid',
            'payment_due_date'          => 'nullable|date',
            // Nested Event Days
            'days'                      => 'required|array',
            'days.*.id'                 => 'nullable|exists:banquet_order_days,id',
            'days.*.event_date'         => 'required|date',
            'days.*.room'               => 'required|string|max:255',
            'days.*.setup_style'        => 'required|string|max:255',
            'days.*.start_time'         => 'nullable|date_format:H:i',
            'days.*.end_time'           => 'nullable|date_format:H:i',
            'days.*.special_requests'   => 'nullable|string',
            // Nested Menu Items for each day
            'days.*.menu_items'                     => 'required|array',
            'days.*.menu_items.*.id'                => 'nullable|exists:banquet_order_menu_items,id',
            'days.*.menu_items.*.item'              => 'required|string|max:255',
            'days.*.menu_items.*.quantity'          => 'required|integer|min:0',
            'days.*.menu_items.*.unit_price'        => 'required|numeric',
            'days.*.menu_items.*.total_price'       => 'required|numeric',
        ]);

         DB::beginTransaction();

        try {
            // Update the main order record
            $order->update($data);

            // Get existing day IDs for the order
            $existingDayIds = $order->days->pluck('id')->toArray();
            $submittedDayIds = array_filter(array_column($data['days'], 'id'));

            // Remove event days that were deleted from the form
            $daysToDelete = array_diff($existingDayIds, $submittedDayIds);
            if (!empty($daysToDelete)) {
                BanquetOrderDay::destroy($daysToDelete);
            }

            // Process each event day from the form
            foreach ($data['days'] as $dayData) {
                if (isset($dayData['id'])) {
                    // Update existing event day
                    $orderDay = BanquetOrderDay::find($dayData['id']);
                    $orderDay->update($dayData);
                } else {
                    // Create a new event day
                    $dayData['banquet_order_id'] = $order->id;
                    $orderDay = BanquetOrderDay::create($dayData);
                }

                // Sync menu items for the current day
                $existingMenuIds = $orderDay->menuItems->pluck('id')->toArray();
                $submittedMenuIds = isset($dayData['menu_items']) ? array_filter(array_column($dayData['menu_items'], 'id')) : [];
                $menuToDelete = array_diff($existingMenuIds, $submittedMenuIds);
                if (!empty($menuToDelete)) {
                     BanquetOrderMenuItem::destroy($menuToDelete);
                }

                foreach ($dayData['menu_items'] as $menuData) {
                    if (isset($menuData['id'])) {
                        // Update existing menu item
                        $menuItem =BanquetOrderMenuItem::find($menuData['id']);
                        $menuItem->update($menuData);
                    } else {
                        // Create new menu item
                        $menuData['banquet_order_day_id'] = $orderDay->id;
                         BanquetOrderMenuItem::create($menuData);
                    }
                }
            }

            DB::commit();
            return redirect()->route('banquet.orders.index')->with('success', 'Banquet order updated successfully.');
        } catch (\Exception $e) {
             DB::rollBack();
            return back()->withErrors(['error' => $e->getMessage()])->withInput();
        }
    }

    /**
     * Remove the specified banquet order from storage.
     */
    public function destroy($id)
    {
        $order = BanquetOrder::findOrFail($id);
        $order->delete();

        return redirect()->route('banquet.orders.index')->with('success', 'Banquet order deleted successfully.');
    }

    private function generateOrderNumber()
    {
        $latest = BanquetOrder::latest()->first();
        $serial = $latest ? str_pad((int)explode('/', $latest->order_number)[0] + 1, 4, '0', STR_PAD_LEFT)
            : str_pad(1, 4, '0', STR_PAD_LEFT);

        return $serial . '/' . now()->year;
    }
}
